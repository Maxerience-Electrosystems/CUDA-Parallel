



#include <iostream>
#include "timer.h"
//#include "utils.h"
#include <string>
#include <stdio.h>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/opencv.hpp>
#include <cuda.h>
#include <cuda_runtime.h>

using namespace cv;
using namespace std;

//kernel for color to greyscale conversion

__global__
void rgba_to_greyscale( const uchar4* const rgbaImage,
                       unsigned char* const greyImage,
                       int numRows, int numCols)
{

    /* int blockid=(gridDim.x*blockIdx.y)+blockIdx.x;
     //__syncthreads();
     int threadid=blockid*blockDim.x*blockDim.y+blockDim.x*threadIdx.y+threadIdx.x;
     uchar4 rgba = rgbaImage[threadid];
     unsigned char gray = (unsigned char)(0.299f * rgba.x + 0.587f * rgba.y + 0.114f * rgba.z);
     greyImage[threadid] = gray;
     printf(" Gray val of %d: %d\n", threadid,greyImage[threadid]);

		//printf("works\n");

	//Pixel Position Calculation
*/      int rgba_x = blockIdx.x * blockDim.x + threadIdx.x;
	  int rgba_y = blockIdx.y * blockDim.y + threadIdx.y;
	  int pixel_pos = rgba_x+rgba_y*numCols;

	    uchar4 rgba = rgbaImage[pixel_pos];
	    unsigned char gray = (unsigned char)(0.299f * rgba.x + 0.587f * rgba.y + 0.114f * rgba.z);
	    greyImage[pixel_pos] = gray;

}

// main function

int main()
{
    Mat imageGrey;

// Reading Image

	 Mat image = imread("lena.jpeg");
		if (image.empty())
		{

			cout << "Cannot load image!" << endl;
			return -1;
		}
	   namedWindow( "Color Image", CV_WINDOW_AUTOSIZE );
	   imshow( "Color Image", image );

//getting and printing pixel information

	 int numRows=image.rows;
     int numCols=image.cols;
     int numPixels=numRows*numCols;

/*    cout<< numRows   <<endl;
      cout<< numCols   <<endl;
      cout<< numPixels <<endl;
 */

//converting BGR, which is an inbuilt format of openCV to RGBA

      cv::cvtColor(image, image, CV_BGR2RGBA);

           //namedWindow( "RGBA", CV_WINDOW_AUTOSIZE );
      	   //imshow( "RGBA", image );

//creating an empty space for the output Mat file

      imageGrey.create(image.rows, image.cols, CV_8UC1);

           //namedWindow( "Grey1 Image", CV_WINDOW_AUTOSIZE );
           // imshow( "Grey1 Image", imageGrey );

// Type Conversion for OpenCV-MAT to CUDA-uchar4

      uchar4 *h_colorImage = (uchar4 *)image.ptr<unsigned char>(0);
      uchar4 *d_colorImage;
      unsigned char* h_greyImage=imageGrey.ptr<unsigned char>(0);
      unsigned char* d_greyImage;

// Memory allocation on the GPU

      cudaMalloc(&d_colorImage, sizeof(uchar4) * numPixels);
      cudaMalloc(&d_greyImage, sizeof(unsigned char) * numPixels);
      cudaMemset(d_greyImage, 0, numPixels * sizeof(unsigned char)); //make sure no memory is left laying around

      cudaMemcpy(d_colorImage, h_colorImage, sizeof(uchar4) * numPixels, cudaMemcpyHostToDevice);

      const dim3 blockSize(9, 5, 1);
      const dim3 gridSize( numRows, numCols, 1);
      rgba_to_greyscale<<<gridSize, blockSize>>>(d_colorImage, d_greyImage, numRows, numCols);

      cudaDeviceSynchronize();

      cudaMemcpy(imageGrey.ptr<unsigned char>(0), d_greyImage, sizeof(unsigned char) * numPixels, cudaMemcpyDeviceToHost);

      //*greyImage  = imageGrey.ptr<unsigned char>(0);

 // Displaying grey image

      namedWindow( "Grey Image", CV_WINDOW_AUTOSIZE );
      imshow( "Grey Image", imageGrey );

//waitKey() keeps the display ON till a key is pressed

      waitKey(0);

   return 0;
}
