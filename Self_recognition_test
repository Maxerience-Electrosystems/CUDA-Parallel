#include "opencv2/opencv.hpp"
#include <fstream>
#include <opencv2/core/core.hpp>
#include <iostream>
#include <string>

using namespace cv;
using namespace std;

int main()
{
   // std::cout<< endl << "Reading:" << endl;
    FileStorage fs;
    fs.open("test.xml", FileStorage::READ);

   /* if (fs.isOpened())
    {
        cout<<"File is opened\n";
    }
*/
    Mat mean;
        fs["mean"] >> mean;
        //std::cout<< mean;
       // cout << mean << endl;
        cout<<mean.type()<<endl;
        Mat a,b;
           mean.convertTo(b,0);
           b=b.reshape(0,112);
          // cout<<b<<endl;
        imshow("mean",b);
       waitKey(0);


    Mat eigenvalues;
              fs["eigenvalues"] >> eigenvalues;
              //std::cout<< eigenvalues;

    Mat eigenvectors;
              fs["eigenvectors"] >> eigenvectors;

    Mat s[50];
    fs["s1_1"] >> s[0];
    fs["s1_2"] >> s[1];
    fs["s1_3"] >> s[2];
    fs["s1_4"] >> s[3];
    fs["s1_5"] >> s[4];
    fs["s1_6"] >> s[5];
    fs["s1_7"] >> s[6];
    fs["s1_8"] >> s[7];
    fs["s1_9"] >> s[8];
    fs["s1_10"] >> s[9];
    fs["s2_1"] >> s[10];
    fs["s2_2"] >> s[11];
    fs["s2_3"] >> s[12];
    fs["s2_4"] >> s[13];
    fs["s2_5"] >> s[14];
    fs["s2_6"] >> s[15];
    fs["s2_7"] >> s[16];
    fs["s2_8"] >> s[17];
    fs["s2_9"] >> s[18];
    fs["s2_10"] >> s[19];
    fs["s3_1"] >> s[20];
    fs["s3_2"] >> s[21];
    fs["s3_3"] >> s[22];
    fs["s3_4"] >> s[23];
    fs["s3_5"] >> s[24];
    fs["s3_6"] >> s[25];
    fs["s3_7"] >> s[26];
    fs["s3_8"] >> s[27];
    fs["s3_9"] >> s[28];
    fs["s3_10"] >> s[29];
    fs["s4_1"] >> s[30];
    fs["s4_2"] >> s[31];
    fs["s4_3"] >> s[32];
    fs["s4_4"] >> s[33];
    fs["s4_5"] >> s[34];
    fs["s4_6"] >> s[35];
    fs["s4_7"] >> s[36];
    fs["s4_8"] >> s[37];
    fs["s4_9"] >> s[38];
    fs["s4_10"] >> s[39];
    fs["s5_1"] >> s[40];
    fs["s5_2"] >> s[41];
    fs["s5_3"] >> s[42];
    fs["s5_4"] >> s[43];
    fs["s5_5"] >> s[44];
    fs["s5_6"] >> s[45];
    fs["s5_7"] >> s[46];
    fs["s5_8"] >> s[47];
    fs["s5_9"] >> s[48];
    fs["s5_10"] >> s[49];
   cout<<"1"<<endl;
    Mat testSample = imread("1.pgm",0);
    imshow("testsample",testSample);
  //  cout<<testSample.type()<<endl;
  // imshow("joyal",testSample);
  // waitKey(0);
  cout<<"2"<<endl;
   testSample=testSample.reshape(0,10304);
   //cout<<testSample<<endl;

         // fs.release();
    a=testSample-b;
    cout<<a.type()<<endl;
    a=a.reshape(0,112);
    imshow("subtracted",a);
    waitKey(0);


        return (0);

}
