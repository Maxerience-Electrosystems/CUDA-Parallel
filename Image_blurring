#include <iostream>
#include "timer.h"
//#include "utils.h"
#include <string>
#include <stdio.h>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/opencv.hpp>
#include <cuda.h>
#include <cuda_runtime.h>
#include <cmath>
#include <cassert>

using namespace cv;
using namespace std;


__global__
void gaussian_blur(const unsigned char* const inputChannel,
                   unsigned char* const outputChannel,
                   int numRows, int numCols,
                   const float* const filter, const int filterWidth)
{


  int column = blockIdx.x * blockDim.x + threadIdx.x;
  int row    = blockIdx.y * blockDim.y + threadIdx.y;

    if ( column >= numCols || row >= numRows )
     {
       return;
     }


	float result = 0.f;



    for (int filter_r = -filterWidth/2; filter_r <= filterWidth/2; ++filter_r)
    {
    for (int filter_c = -filterWidth/2; filter_c <= filterWidth/2; ++filter_c)
    {


          int image_r = min(max(row + filter_r, 0), static_cast<int>(numRows - 1));
          int image_c = min(max(column + filter_c, 0), static_cast<int>(numCols - 1));

          float image_value = static_cast<float>(inputChannel[(image_r*numCols) + image_c]);
          float filter_value = filter[((filter_r + filterWidth/2)*filterWidth) + (filter_c+filterWidth/2)];

          result += image_value * filter_value;
        }
      }

 outputChannel[(row*numCols)+column] = result;

 }

__global__
void separateChannels(const uchar4* const inputImageRGBA,
                      int numRows,
                      int numCols,
                      unsigned char* const redChannel,
                      unsigned char* const greenChannel,
                      unsigned char* const blueChannel)
{

    int rgba_x = blockIdx.x * blockDim.x + threadIdx.x;
    int rgba_y = blockIdx.y * blockDim.y + threadIdx.y;

    if ( rgba_x >= numCols || rgba_y >= numRows )
     {
       return;
     }

	int pixel_pos = rgba_x+rgba_y*numCols;
    uchar4 rgba = inputImageRGBA[pixel_pos];

    unsigned char red = (unsigned char) (1.0f * rgba.x);
    redChannel[pixel_pos] = red;

	unsigned char green = (unsigned char) (1.0f * rgba.y);
    greenChannel[pixel_pos] = green;

	unsigned char blue = (unsigned char) (1.0f * rgba.z);
    blueChannel[pixel_pos] = blue;

}

__global__
void recombineChannels(const unsigned char* const redChannel,
                       const unsigned char* const greenChannel,
                       const unsigned char* const blueChannel,
                       uchar4* const outputImageRGBA,
                       int numRows,
                       int numCols)
{
  const int2 thread_2D_pos = make_int2( blockIdx.x * blockDim.x + threadIdx.x,
                                        blockIdx.y * blockDim.y + threadIdx.y);

  const int thread_1D_pos = thread_2D_pos.y * numCols + thread_2D_pos.x;

  if (thread_2D_pos.x >= numCols || thread_2D_pos.y >= numRows)
    return;

  unsigned char red   = redChannel[thread_1D_pos];
  unsigned char green = greenChannel[thread_1D_pos];
  unsigned char blue  = blueChannel[thread_1D_pos];

  //Alpha should be 255 for no transparency
  uchar4 outputPixel = make_uchar4(blue, green, red, 255);

  outputImageRGBA[thread_1D_pos] = outputPixel;
}


int main()
{

cv::Mat imageOutputRGBA;

uchar4   *d_inputImageRGBA;
uchar4   *d_outputImageRGBA;
unsigned char *d_redBlurred, *d_greenBlurred, *d_blueBlurred;
float *h_filter;
int    filterWidth;
unsigned char *d_red, *d_green, *d_blue;
float         *d_filter;

// Reading Image

	 Mat imageInputRGBA = imread("howrahBridge.jpeg");
		if (imageInputRGBA.empty())
		{
            cout << "Cannot load image!" << endl;
			return -1;
		}
	   namedWindow( "Original Image", CV_WINDOW_AUTOSIZE );
	   imshow( "Original Image", imageInputRGBA);
	   cout << "Press any key to view blurring effect" << endl;

waitKey(0);

//getting and printing pixel information

	 int numRows=imageInputRGBA.rows;
     int numCols=imageInputRGBA.cols;
     int numPixels=numRows*numCols;

      //cout<< numRows   <<endl;
      //cout<< numCols   <<endl;
      //cout<< numPixels <<endl;


//cv::Mat imageInputRGBA1;
//converting BGR, which is an inbuilt format of openCV to RGBA

   cv::cvtColor(imageInputRGBA, imageInputRGBA, CV_BGR2RGBA);

        // namedWindow( "RGBA", CV_WINDOW_AUTOSIZE );
      	//imshow( "RGBA", imageInputRGBA );

   imageOutputRGBA.create(imageInputRGBA.rows, imageInputRGBA.cols, CV_8UC4);

   uchar4 *h_inputImageRGBA  = (uchar4 *)imageInputRGBA.ptr<unsigned char>(0);
   uchar4 *h_outputImageRGBA = (uchar4 *)imageOutputRGBA.ptr<unsigned char>(0);

   cudaMalloc(&d_inputImageRGBA, sizeof(uchar4) * numPixels);
   cudaMalloc(&d_outputImageRGBA, sizeof(uchar4) * numPixels);
   //cudaMemset(d_outputImageRGBA, 0, numPixels * sizeof(uchar4));
   cudaMemcpy(d_inputImageRGBA, h_inputImageRGBA, sizeof(uchar4) * numPixels, cudaMemcpyHostToDevice);


   const int blurKernelWidth = 9;
   const float blurKernelSigma = 2.;
   filterWidth = blurKernelWidth;
   h_filter =  new float[blurKernelWidth * blurKernelWidth];
   float filterSum = 0.f;
   for (int r = -blurKernelWidth/2; r <= blurKernelWidth/2; ++r) {
       for (int c = -blurKernelWidth/2; c <= blurKernelWidth/2; ++c) {
         float filterValue = expf( -(float)(c * c + r * r) / (2.f * blurKernelSigma * blurKernelSigma));
         (h_filter)[(r + blurKernelWidth/2) * blurKernelWidth + c + blurKernelWidth/2] = filterValue;
         filterSum += filterValue;
       }
     }
  // cout << h_filter[5] << endl;
     float normalizationFactor = 1.f / filterSum;

     for (int r = -blurKernelWidth/2; r <= blurKernelWidth/2; ++r) {
       for (int c = -blurKernelWidth/2; c <= blurKernelWidth/2; ++c) {
         (h_filter)[(r + blurKernelWidth/2) * blurKernelWidth + c + blurKernelWidth/2] *= normalizationFactor;
       }
     }


 //cout << *h_filter << endl;
     cudaMalloc(&d_redBlurred,    sizeof(unsigned char) * numPixels);
     cudaMalloc(&d_greenBlurred,  sizeof(unsigned char) * numPixels);
     cudaMalloc(&d_blueBlurred,   sizeof(unsigned char) * numPixels);
     cudaMemset(d_redBlurred,   0, sizeof(unsigned char) * numPixels);
     cudaMemset(d_greenBlurred, 0, sizeof(unsigned char) * numPixels);
     cudaMemset(d_blueBlurred,  0, sizeof(unsigned char) * numPixels);

     cudaMalloc(&d_red,   sizeof(unsigned char) * numPixels);
     cudaMalloc(&d_green, sizeof(unsigned char) * numPixels);
     cudaMalloc(&d_blue,  sizeof(unsigned char) * numPixels);
     cudaMalloc(&d_filter, sizeof(float) * filterWidth*filterWidth);
     cudaMemcpy(d_filter,h_filter, sizeof(float)*filterWidth*filterWidth , cudaMemcpyHostToDevice);

       const dim3 blockSize(32, 32, 1);
    // const dim3 gridSize( ceil((float)numCols/16), ceil((float)numRows/16), 1);
       const dim3 gridSize(20,16,1);

    //Launch a kernel for separating the RGBA image into different color channels
     separateChannels<<<gridSize, blockSize>>>(d_inputImageRGBA, numRows, numCols,d_red,d_green,d_blue);

     cudaDeviceSynchronize();

    //Call your convolution kernel here 3 times, once for each color channel.
     gaussian_blur<<<gridSize, blockSize>>>(d_red,d_redBlurred, numRows, numCols,d_filter,filterWidth);
     gaussian_blur<<<gridSize, blockSize>>>(d_green,d_greenBlurred, numRows, numCols,d_filter,filterWidth);
     gaussian_blur<<<gridSize, blockSize>>>(d_blue,d_blueBlurred, numRows, numCols,d_filter,filterWidth);

     recombineChannels<<<gridSize, blockSize>>>(d_redBlurred,d_greenBlurred,d_blueBlurred,d_outputImageRGBA,numRows,numCols);

     cudaDeviceSynchronize();

     cudaFree(d_red);
     cudaFree(d_green);
     cudaFree(d_blue);
     cudaFree(d_filter);

     cudaMemcpy(imageOutputRGBA.ptr<unsigned char>(0), d_outputImageRGBA, sizeof(uchar4) * numPixels, cudaMemcpyDeviceToHost);

     //cout << imageOutputRGBA.cols << endl;
     namedWindow( "Blurred Image", CV_WINDOW_AUTOSIZE );
     imshow( "Blurred Image", imageOutputRGBA  );


waitKey(0);
return 0;

}
