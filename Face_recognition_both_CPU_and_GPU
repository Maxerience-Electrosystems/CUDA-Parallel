#if defined _MSC_VER && _MSC_VER >= 1400
#pragma warning(disable : 4100)
#endif

#include <iostream>
#include <fstream>
#include <sstream>
#include <opencv2/opencv.hpp> 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <math.h>
#include <float.h>
#include <limits.h>
#include <time.h>
#include <ctype.h>
#include <vector>

#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/contrib/contrib.hpp"
#include "opencv2/imgproc/imgproc.hpp"

using namespace std;
using namespace cv;
#include <iomanip>
#include "opencv2/contrib/contrib.hpp"
#include "opencv2/objdetect/objdetect.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/gpu/gpu.hpp"

using namespace std;
using namespace cv;
using namespace cv::gpu;

template<class T>
void convertAndResize(const T& src, T& gray, T& resized, double scale)
{
    if (src.channels() == 3)
    {
        cvtColor( src, gray, CV_BGR2GRAY );
    }
    else
    {
        gray = src;
    }

    Size sz(cvRound(gray.cols * scale), cvRound(gray.rows * scale));

    if (scale != 1)
    {
        resize(gray, resized, sz);
    }
    else
    {
        resized = gray;
    }
}

int main()
{

    if (getCudaEnabledDeviceCount() == 0)
    {
        return cerr << "No GPU found or the library is compiled without GPU support" << endl, -1;
    }

    cv::gpu::printShortCudaDeviceInfo(cv::gpu::getDevice());

    string cascadeName="haarcascade_frontalface_alt.xml";
    string inputName="sample.avi";
    bool isInputImage = false;
    bool isInputVideo = false;
    bool isInputCamera = true;


    CascadeClassifier_GPU cascade_gpu;
    if (!cascade_gpu.load(cascadeName))
    {
        cout << "ERROR: Could not load cascade classifier" << cascadeName << "\n" << endl;
    }

    CascadeClassifier cascade_cpu;
    if (!cascade_cpu.load(cascadeName))
    {
        cout << "ERROR: Could not load cascade classifier" << cascadeName << "\n" << endl;
    }

    VideoCapture capture;
    Mat image;

    if (isInputImage)
    {
        image = imread(inputName);
        CV_Assert(!image.empty());
    }
    else if (isInputVideo)
    {
        capture.open(inputName);
        CV_Assert(capture.isOpened());
    }
    else
    {
        capture.open(atoi(inputName.c_str()));
        CV_Assert(capture.isOpened());
    }

    namedWindow("result", 1);
    Mat frame, frame_cpu, gray_cpu, resized_cpu, faces_downloaded, frameDisp;
    vector<Rect> facesBuf_cpu;

    GpuMat frame_gpu, gray_gpu, resized_gpu, facesBuf_gpu;

    /* parameters */
    bool useGPU = true;
    double scaleFactor = 1.0;
    bool findLargestObject = false;
    bool filterRects = true;

    int detections_num;

    for (;;)
    {
    	Size size(92,112);
    	Rect box[10];

        if (isInputCamera || isInputVideo)
        {
            capture >> frame;
            cv::flip(frame,frame,1);

            if (frame.empty())
            {
                break;
            }
        }

        (image.empty() ? frame : image).copyTo(frame_cpu);
        frame_gpu.upload(image.empty() ? frame : image);

        convertAndResize(frame_gpu, gray_gpu, resized_gpu, scaleFactor);
        convertAndResize(frame_cpu, gray_cpu, resized_cpu, scaleFactor);

        TickMeter tm;
        tm.start();

        if (useGPU)
        {
            //cascade_gpu.visualizeInPlace = true;
            cascade_gpu.findLargestObject = findLargestObject;

            detections_num = cascade_gpu.detectMultiScale(resized_gpu, facesBuf_gpu, 1.2,
                                                          (filterRects || findLargestObject) ? 1 : 0);
            facesBuf_gpu.colRange(0, detections_num).download(faces_downloaded);

        }
        else
        {
            Size minSize = cascade_gpu.getClassifierSize();
            cascade_cpu.detectMultiScale(resized_cpu, facesBuf_cpu, 1.2,
                                         (filterRects || findLargestObject) ? 4 : 0,
                                         (findLargestObject ? CV_HAAR_FIND_BIGGEST_OBJECT : 0) | CV_HAAR_SCALE_IMAGE, minSize);
            detections_num = (int)facesBuf_cpu.size();
        }

        if (!useGPU && detections_num)
        {
            for (int i = 0; i < detections_num; ++i)
            {
               //rectangle(resized_cpu, facesBuf_cpu[i], Scalar(255));
            	//cv::Mat new_img = cvarrToMat(resized_cpu);
            	char b[100];
            	Mat croppedFaceImage = resized_cpu(facesBuf_cpu[i]).clone();
            	sprintf(b,"test/crop%d.pgm",i);

            	cv::resize(croppedFaceImage,croppedFaceImage,size);

            	imwrite(b,croppedFaceImage);

            	Ptr<FaceRecognizer> tester = createEigenFaceRecognizer();
            	const char* file1="model_xml.xml";
            	tester->load(file1);

            	Mat testSample = imread(b,0);
            	int predictedLabel = tester->predict(testSample);
                int scale=1;
                Point pt1,pt2;

            	     pt1.x =facesBuf_cpu[i].x*scale;
            	     pt2.x =(facesBuf_cpu[i].x + facesBuf_cpu[i].width)*scale;
            	     pt1.y =facesBuf_cpu[i].y*scale;
            	     pt2.y =(facesBuf_cpu[i].y + facesBuf_cpu[i].height)*scale;

            	     char* name;
            	          switch(predictedLabel)
            	          {
            	          case 0:
            	              {name="Devanjan\0";
            	              rectangle(resized_cpu, facesBuf_cpu[i], Scalar(255));
            	          break;}
            	          case 1:
            	              {name="Gautam\0";
            	              rectangle(resized_cpu, facesBuf_cpu[i], Scalar(255));
            	               break;}
            	          case 2:
            	              {name="Gourav\0";
            	              rectangle(resized_cpu, facesBuf_cpu[i], Scalar(255));
            	               break;}
            	          case 3:
            	              {name="Joyal\0";
            	              rectangle(resized_cpu, facesBuf_cpu[i], Scalar(255));
            	               break;}
            	          case 4:
            	              {name="Pradeep\0";
            	              rectangle(resized_cpu, facesBuf_cpu[i], Scalar(255));
            	               break;}
            	          default:
            	              {name="Unknown\0";
            	              rectangle(resized_cpu, facesBuf_cpu[i], Scalar(255));
            	              break;}
            	          }

            	         //cv::Mat new_img = cvarrToMat(img);

            	         if(name=="Unknown\0")
            	          putText(resized_cpu,name,Point(pt1.x,pt1.y-10),FONT_HERSHEY_COMPLEX_SMALL,0.8,Scalar(255),1,8,false);
            	         else
            	          putText(resized_cpu,name,Point(pt1.x,pt1.y-10),FONT_HERSHEY_COMPLEX_SMALL,0.8,Scalar(255),1,8,false);

            }
            //imshow("result",resized_cpu);
        }

        if (useGPU)
        {
            resized_gpu.download(resized_cpu);

             for (int i = 0; i < detections_num; ++i)
             {
                //rectangle(resized_cpu, faces_downloaded.ptr<cv::Rect>()[i], Scalar(255),3);
                char b[100];
               // imshow("timepass",faces_downloaded);
               // waitKey(0);
                Mat croppedFaceImage = resized_cpu(faces_downloaded.ptr<cv::Rect>()[i]).clone();
              	sprintf(b,"test/crop%d.pgm",i);
              	cv::resize(croppedFaceImage,croppedFaceImage,size);

                        imwrite(b,croppedFaceImage);

                      	Ptr<FaceRecognizer> tester = createEigenFaceRecognizer();
                       	const char* file1="model_xml.xml";
                       	tester->load(file1);

                        Mat testSample = imread(b,0);
                       	int predictedLabel = tester->predict(testSample);
                        int scale=1;
                        Point pt1,pt2;

                        pt1.x =faces_downloaded.ptr<cv::Rect>()[i].x*scale;
                        pt2.x =(faces_downloaded.ptr<cv::Rect>()[i].x + faces_downloaded.ptr<cv::Rect>()[i].width)*scale;
                        pt1.y =faces_downloaded.ptr<cv::Rect>()[i].y*scale;
                        pt2.y =(faces_downloaded.ptr<cv::Rect>()[i].y + faces_downloaded.ptr<cv::Rect>()[i].height)*scale;

                            	     char* name;
                            	          switch(predictedLabel)
                            	          {
                            	          case 0:
                            	              {name="Devanjan\0";
                            	              rectangle(resized_cpu, faces_downloaded.ptr<cv::Rect>()[i], Scalar(255));
                            	          break;}
                            	          case 1:
                            	              {name="Gautam\0";
                            	              rectangle(resized_cpu, faces_downloaded.ptr<cv::Rect>()[i], Scalar(255));
                            	               break;}
                            	          case 2:
                            	              {name="Gourav\0";
                            	              rectangle(resized_cpu, faces_downloaded.ptr<cv::Rect>()[i], Scalar(255));
                            	               break;}
                            	          case 3:
                            	              {name="Joyal\0";
                            	              rectangle(resized_cpu,faces_downloaded.ptr<cv::Rect>()[i], Scalar(255));
                            	               break;}
                            	          case 4:
                            	              {name="Pradeep\0";
                            	              rectangle(resized_cpu, faces_downloaded.ptr<cv::Rect>()[i], Scalar(255));
                            	               break;}
                            	          default:
                            	          {name="Unknown\0";
                            	          rectangle(resized_cpu, faces_downloaded.ptr<cv::Rect>()[i], Scalar(255));
                            	          break;}
                            	          }

                            	         //cv::Mat new_img = cvarrToMat(img);

                        if(name=="Unknown\0")
                        putText(resized_cpu,name,Point(pt1.x,pt1.y-10),FONT_HERSHEY_COMPLEX_SMALL,0.8,Scalar(255),1,8,false);
                        else
                        putText(resized_cpu,name,Point(pt1.x,pt1.y-10),FONT_HERSHEY_COMPLEX_SMALL,0.8,Scalar(255),1,8,false);

                  }

        }

        tm.stop();
        double detectionTime = tm.getTimeMilli();
        double fps = 1000 / detectionTime;
        cout << fps << endl;

       //cvtColor(resized_cpu, frameDisp, CV_GRAY2BGR);
        imshow("result", resized_cpu);

       //imshow("result", frameDisp);

       //The function waitKey waits for a key event
       //infinitely (when delay<=0) or for delay milliseconds, when it is positive.
        char key = (char)waitKey(1);
        if (key == 27)
        {
            break;
        }
    }

    return 0;
}
